<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.Design" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Resources" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<# var model = LoadResources(); #>
// <auto-generated />

using System;
using System.Reflection;
using System.Resources;
using System.Text.RegularExpressions;
using JetBrains.Annotations;

namespace <#= model.Namespace #>
{
  /// <summary>This class wraps <see cref="ResourceManager" /> to ease usage.</summary>
  <#= model.AccessModifier #> static partial class <#= model.Class #>
  {
    private static readonly ResourceManager manager =
      new ResourceManager("<#= model.ResourceName #>", typeof(<#= model.Class #>).GetTypeInfo().Assembly);
<#
  foreach (var resource in model.Resources)
  {
#>

    /// <summary>
<#
    foreach (var line in Lines(resource.Value))
    {
#>
    ///   <#= Xml(line) #>
<#
    }
#>
    /// </summary>
<#
    if (resource.Parameters.Any())
    {
#>
    public static string <#= resource.Name #>(<#= List(resource.Parameters, "[CanBeNull] object ") #>)
      => string.Format(
        GetString("<#= resource.Name #>", <#= List(resource.Parameters, "nameof(", ")") #>),
        <#= List(resource.Parameters) #>);
<#
    }
    else
    {
#>
    public static string <#= resource.Name #> => GetString("<#= resource.Name #>");
<#
    }
  }
#>

    private static string GetString(string name, params string[] names) => Regex.Replace(
      manager.GetString(name),
      @"\{(\w+)(.*?)\}",
      match => $"{{{ Array.IndexOf(names, match.Groups[1].Value) }{ match.Groups[2].Value }}}");
  }
}
<#+
  ResourceFile LoadResources(string path = "Resources.resx", string acces = "internal")
  {
    path = Host.ResolvePath(path);
    var dte = (DTE)((IServiceProvider)Host).GetService(typeof(DTE));
    var resource = dte.Solution.FindProjectItem(path);
    var template = dte.Solution.FindProjectItem(Host.TemplateFile);
    var project = template.ContainingProject;
    var length = ((string)project.Properties.Item("FullPath").Value).Length;
    var directory = Path.GetDirectoryName(path);
    var @class = Path.GetFileNameWithoutExtension(path);
    var @namespace = Coalesce(
      (string)resource.Properties.Item("CustomToolNamespace")?.Value,
      $"{ project.Properties.Item("RootNamespace").Value }.{directory.Substring(length).Replace(Path.DirectorySeparatorChar, '.')}");
    Resource[] resources;

    using (var reader = new ResXResourceReader(path) { UseResXDataNodes = true })
    {
      resources = (from DictionaryEntry r in reader
                   select new Resource((ResXDataNode)r.Value)).ToArray();
    }

    return new ResourceFile(@namespace, acces, @class, resources);
  }

  string Coalesce(params string[] values) => values.FirstOrDefault(value => !string.IsNullOrWhiteSpace(value));
  IEnumerable<string> Lines(string value) => value.Split(new[] { Environment.NewLine }, StringSplitOptions.None);
  string List(IEnumerable<string> items, string prefix = "", string suffix = "")
    => string.Join(", ", items.Select(i => prefix + i + suffix));
  string Xml(string value) => value.Replace("<", "&lt;").Replace(">", "&gt;");

  class ResourceFile
  {
    public ResourceFile(string @namespace, string acces, string @class, IEnumerable<Resource> resources)
    {
      Namespace = @namespace;
      AccessModifier = acces;
      Class = @class;
      Resources = resources;
    }

    public string Namespace { get; }
    public string AccessModifier { get; }
    public string Class { get; }
    public IEnumerable<Resource> Resources { get; }
    public string ResourceName => $"{ Namespace }.{ Class }";
  }

  class Resource
  {
    public Resource(ResXDataNode node)
    {
      Name = node.Name;
      Value = (string)node.GetValue((ITypeResolutionService)null);
      Parameters = (from match in Regex.Matches(Value, @"\{(\w+).*?\}").Cast<Match>()
                    select match.Groups[1].Value).Distinct();
    }

    public string Name { get; }
    public string Value { get; }
    public IEnumerable<string> Parameters { get; }
  }
#>