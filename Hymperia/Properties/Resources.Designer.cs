// <auto-generated />

using System;
using System.Reflection;
using System.Resources;
using System.Text.RegularExpressions;
using JetBrains.Annotations;

namespace Hymperia.Facade.Properties
{
  /// <summary>This class wraps <see cref="ResourceManager" /> to ease usage.</summary>
  internal static partial class Resources
  {
    private static readonly ResourceManager manager =
      new ResourceManager("Hymperia.Facade.Properties.Resources", typeof(Resources).GetTypeInfo().Assembly);

    /// <summary>
    ///   et
    /// </summary>
    public static string And => GetString("And");

    /// <summary>
    ///   Peut seulement convertir depuis {origin}.
    /// </summary>
    public static string CanOnlyConvertFrom([CanBeNull] object origin)
      => string.Format(
        GetString("CanOnlyConvertFrom", nameof(origin)),
        origin);

    /// <summary>
    ///   Peut seulement convertir vers {target}.
    /// </summary>
    public static string CanOnlyConvertTo([CanBeNull] object target)
      => string.Format(
        GetString("CanOnlyConvertTo", nameof(target)),
        target);

    /// <summary>
    ///   , 
    /// </summary>
    public static string EnumerationSeparator => GetString("EnumerationSeparator");

    /// <summary>
    ///   N'as pas pu convertir {value} en {target}.
    /// </summary>
    public static string ImpossibleCast([CanBeNull] object value, [CanBeNull] object target)
      => string.Format(
        GetString("ImpossibleCast", nameof(value), nameof(target)),
        value, target);

    private static string GetString(string name, params string[] names) => Regex.Replace(
      manager.GetString(name),
      @"\{(\w+)(.*?)\}",
      match => $"{{{ Array.IndexOf(names, match.Groups[1].Value) }{ match.Groups[2].Value }}}");
  }
}
